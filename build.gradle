
group = 'org.xbib.elasticsearch.plugin'
version = '2.3.3.0'

ext {
    pluginName = 'skos'
    pluginClassname = 'org.xbib.elasticsearch.plugin.analysis.SKOSAnalysisPlugin'
    pluginDescription = 'SKOS plugin for Elasticsearch'
    versions = [
            'elasticsearch' : '2.3.3'
    ]
}

apply plugin: 'java'
apply plugin: 'maven'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven {
        url "http://xbib.org/repository"
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    provided
    wagon
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    releaseJars {
        extendsFrom runtime
        exclude group: 'org.elasticsearch'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'log4j'
        exclude group: 'commons-logging'
        exclude group: 'org.slf4j', module: 'jcl-over-slf4j'

    }
}

dependencies {
    compile "org.elasticsearch:elasticsearch:${versions.elasticsearch}"
    compile "org.apache.jena:jena-arq:2.12.1"
    testCompile "junit:junit:4.12"
    releaseJars "${project.group}:${project.name}:${project.version}"
    wagon 'org.apache.maven.wagon:wagon-ssh-external:2.10'
}

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

test {
    systemProperty 'path.home', projectDir.absolutePath + 'build'
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

task makePluginDescriptor(type: Copy) {
    from 'src/main/templates'
    into 'build/tmp/plugin'
    expand([
        'descriptor': [
            'name': pluginName,
            'classname': pluginClassname,
            'description': pluginDescription,
            'jvm': true,
            'site': false,
            'isolated': true,
            'version': project.property('version'),
            'javaVersion': project.property('targetCompatibility'),
            'elasticsearchVersion' : versions.elasticsearch
        ]
    ])
}

task buildPluginZip(type: Zip, dependsOn: [':jar', ':makePluginDescriptor']) {
    from configurations.releaseJars
    from 'build/tmp/plugin'
    classifier = 'plugin'
}

task unpackPlugin(type: Copy, dependsOn: [':buildPluginZip']) {
    delete "plugins"
    from configurations.releaseJars
    from 'build/tmp/plugin'
    into 'plugins/helper'
}

task integrationTest(type: Test, dependsOn: ['unpackPlugin']) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = configurations.integrationTestCompile
    classpath += fileTree("plugins/${pluginName}").include('*.jar')
    classpath += sourceSets.integrationTest.output
    // without this trick to remove identical jars from classpath, an Elasticsearch bug whines about a "jar hell"
    classpath -= configurations.releaseJars
    outputs.upToDateWhen { false }
    systemProperty 'path.home', projectDir.absolutePath + 'build'
    testLogging.showStandardStreams = false
}

integrationTest.mustRunAfter test
check.dependsOn integrationTest

clean {
    delete "plugins"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier 'sources'
}

artifacts {
    archives sourcesJar
    archives buildPluginZip
}

clean {
    delete "data"
}

uploadArchives {
    repositories {
        if (project.hasProperty("xbibUsername")) {
            mavenDeployer {
                configuration = configurations.wagon
                repository(
                        id: 'xbib.org',
                        url: uri('scpexe://xbib.org/repository'),
                        authentication: [userName: xbibUsername, privateKey: xbibPrivateKey]
                )
                pom.project {
                    inceptionYear '2012'
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                }
            }
        }
    }
}
